package config;
import java.util.Properties;



import javax.sql.DataSource;



import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScans;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.view.InternalResourceViewResolver;



@Configuration
@EnableTransactionManagement
@EnableAutoConfiguration(exclude = {HibernateJpaAutoConfiguration.class})
@ComponentScans(value = {@ComponentScan("boot.entry"),
        @ComponentScan("Model"),
        @ComponentScan("Controller"),
        @ComponentScan("DAO"),
        @ComponentScan("Miscallaneous"),
        @ComponentScan("Service"),})





public class Configu {
    
    @Value("${db.driver}")
    private String DB_DRIVER;
    
    @Value("${db.password}")
    private String DB_PASSWORD;
    
    @Value("${db.url}")
    private String DB_URL;
    
    @Value("${db.username}")
    private String DB_USERNAME;
    
    @Value("${hibernate.dialect}")
    private String HIBERNATE_DIALECT;
    
    @Value("${hibernate.show_sql}")
    private String HIBERNATE_SHOW_SQL;
    
    @Value("${hibernate.hbm2ddl.auto}")
    private String HIBERNATE_HBM2DDL_AUTO;
    
    @Value("${entitymanager.packagesToScan}")
    private String ENTITYMANAGER_PACKAGES_TO_SCAN;
    
    
    @Bean
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sf = new LocalSessionFactoryBean();
        sf.setDataSource(dataSource());
        sf.setPackagesToScan(ENTITYMANAGER_PACKAGES_TO_SCAN);
        Properties hp = new Properties();
        hp.put("hibernate.dialect", HIBERNATE_DIALECT);
        hp.put("hibernate.show_sql", HIBERNATE_SHOW_SQL);
        hp.put("hibernate.hbm2ddl.auto", HIBERNATE_HBM2DDL_AUTO);
        sf.setHibernateProperties(hp);
        return sf;
    }
    
    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName(DB_DRIVER);
        ds.setUrl(DB_URL);
        ds.setUsername(DB_USERNAME);
        ds.setPassword(DB_PASSWORD);
        return ds;
    }
    
    @Bean
    public HibernateTransactionManager transactionManager() {
        HibernateTransactionManager tm = new HibernateTransactionManager();
        tm.setSessionFactory(sessionFactory().getObject());
        return tm;
    }
    
    @Bean
    public InternalResourceViewResolver jspViewResolver() {
        InternalResourceViewResolver rl = new InternalResourceViewResolver();
        rl.setPrefix("/views/");
        rl.setSuffix(".jsp");
        return rl;
    }



}